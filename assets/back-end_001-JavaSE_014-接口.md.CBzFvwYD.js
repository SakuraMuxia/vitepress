import{_ as a,c as s,o as e,a5 as i}from"./chunks/framework.ysm0ofoH.js";const k=JSON.parse('{"title":"接口","description":"","frontmatter":{},"headers":[],"relativePath":"back-end/001-JavaSE/014-接口.md","filePath":"back-end/001-JavaSE/014-接口.md"}'),n={name:"back-end/001-JavaSE/014-接口.md"},t=i(`<h1 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h1><p>接口：类似与上电脑主机上接口，用于连接对接其他子系统，相当于一个桥梁，用于连接两个系统。这个桥梁有一种约定，一种规则，一种能力。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">完成一件事情：要求</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">实现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">只关注约定，不关注具体实现。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="接口的规则" tabindex="-1">接口的规则 <a class="header-anchor" href="#接口的规则" aria-label="Permalink to &quot;接口的规则&quot;">​</a></h2><blockquote><p>接口中的方法默认都为全局抽象方法</p><p>接口中的属性默认都是全局静态常量 public static final int a</p><p>接口不能直接new对象，</p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">接口中的方法开发中默认 不写 public ab </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接口中名词改变</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接口规则的示例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,10),p=[t];function l(r,c,d,h,o,u){return e(),s("div",null,p)}const m=a(n,[["render",l]]);export{k as __pageData,m as default};
