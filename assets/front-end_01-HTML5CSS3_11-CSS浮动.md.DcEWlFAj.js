import{_ as s,c as a,o as n,a5 as i}from"./chunks/framework.ysm0ofoH.js";const k=JSON.parse('{"title":"浮动","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/01-HTML5CSS3/11-CSS浮动.md","filePath":"front-end/01-HTML5CSS3/11-CSS浮动.md"}'),e={name:"front-end/01-HTML5CSS3/11-CSS浮动.md"},l=i(`<h1 id="浮动" tabindex="-1">浮动 <a class="header-anchor" href="#浮动" aria-label="Permalink to &quot;浮动&quot;">​</a></h1><h2 id="浮动的简介" tabindex="-1">浮动的简介 <a class="header-anchor" href="#浮动的简介" aria-label="Permalink to &quot;浮动的简介&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 浮动最初用于实现文字环绕效果</span></span>
<span class="line"><span>2. 现在，浮动是主流的布局方式之一</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="元素浮动之后的特点" tabindex="-1">元素浮动之后的特点 <a class="header-anchor" href="#元素浮动之后的特点" aria-label="Permalink to &quot;元素浮动之后的特点&quot;">​</a></h2><p>元素浮动之后，称为浮动元素，具有如下特点：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 浮动元素脱离文档流</span></span>
<span class="line"><span>2. 多个浮动的元素会水平排列，一行放不下自动换行</span></span>
<span class="line"><span>3. 不论元素原来的显示模式是什么，设置成浮动之后，就是浮动元素，具有自己的显示特点：</span></span>
<span class="line"><span>   ① 水平排列，自动换行，不存在外边距的塌陷和合并，设置左右外边距auto不会居中（与块级区别）</span></span>
<span class="line"><span>   ② 设置宽高、内外边距都没有问题（与行内区别）</span></span>
<span class="line"><span>   ③ 不会被父元素作为文本去处理（与行内块和行内区别）</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>不论是行内元素还是块级元素，设置浮动之后都会具有如下特点：</span></span>
<span class="line"><span>不再独占一行</span></span>
<span class="line"><span>可以设置宽高</span></span>
<span class="line"><span>完美支持 margin 和 padding</span></span>
<span class="line"><span>默认宽度会根据内容进行计算</span></span>
<span class="line"><span>构成了 BFC</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p><strong>文档流：</strong> 文档流里的元素会按照顺序从上到下，从左到右排列。</p></blockquote><blockquote><ul><li>浮动的元素可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</li><li>由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</li></ul></blockquote><p>当把框 1 向右浮动时，它脱离文档流并且向右移动，直到它的右边缘碰到包含框的右边缘：</p><h2 id="浮动元素产生的影响" tabindex="-1">浮动元素产生的影响 <a class="header-anchor" href="#浮动元素产生的影响" aria-label="Permalink to &quot;浮动元素产生的影响&quot;">​</a></h2><h3 id="_1-对后面兄弟元素的影响" tabindex="-1">① 对后面兄弟元素的影响 <a class="header-anchor" href="#_1-对后面兄弟元素的影响" aria-label="Permalink to &quot;① 对后面兄弟元素的影响&quot;">​</a></h3><p><strong>影响：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>后面兄弟元素会占据浮动元素原来的位置，可能造成位置的重叠，浮动元素显示在上</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>解决：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>方案一： 给紧邻这浮动元素的后面的兄弟元素设置 clear:both</span></span>
<span class="line"><span>方案二： 兄弟元素要浮动都浮动，浮动元素不要跟不浮动的元素做兄弟，可以把都浮动的用一个div包起来，不浮动的做叔叔</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-对父元素的影响" tabindex="-1">② 对父元素的影响 <a class="header-anchor" href="#_2-对父元素的影响" aria-label="Permalink to &quot;② 对父元素的影响&quot;">​</a></h3><p><strong>影响：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>子元素浮动之后，不能撑起父元素高度，造成高度塌陷</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>解决：</strong></p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">方案一： 父元素设置固定高度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">方案二： 父元素设置浮动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">方案三： 父元素设置 overflow, 值只要不是 visible 都可以 设置为hidden</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">方案四： 给父元素添加个子元素，放在所有浮动元素的后面，该元素要求是块级元素，设置 clear:both</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">方案五： 原理同方案四相同，使用伪元素给父元素添加子元素，设置 clear:both (推荐)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">伪元素 在浏览器解析的时候动态的解析，添加进去的元素，本质是一个选择器</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>伪元素 在浏览器解析的时候动态的解析，添加进去的元素，本质是一个选择器</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">父元素</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="浮动相关的-css-属性" tabindex="-1">浮动相关的 CSS 属性 <a class="header-anchor" href="#浮动相关的-css-属性" aria-label="Permalink to &quot;浮动相关的 CSS 属性&quot;">​</a></h2><table><thead><tr><th>CSS 属性</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>float</td><td>设置浮动</td><td>left、right、none</td></tr><tr><td>clear</td><td>清除浮动的影响</td><td>left、right、both</td></tr></tbody></table><p><code>清除浮动只能对子元素有影响，孙子不算，孙子需要单独清除浮动</code></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    float:left</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    float:right</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/*float</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 属性的默认值是</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> none</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  表示没有浮动</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>浮动的元素会脱离文档流，按照指定的方向发生移动，遇到父级的边界或者是上一个浮动元素或者是上一个不浮动兄弟元素就停下来，所有，浮动元素前面的元素不会受到影响，后面的兄弟元素和父元素会受到影响。</p><ul><li><strong>后面的兄弟元素</strong>会当做浮动的元素不存在，可能会与浮动元素位置发生重合。</li><li><strong>父元素：</strong> 浮动的元素脱离父级区域，无法撑开父元素的高度，造成父元素高度塌陷。进而会影响到父元素后面的兄弟元素，造成布局问题。</li></ul><h2 id="行内元素或行内块元素在布局中的特点" tabindex="-1">行内元素或行内块元素在布局中的特点 <a class="header-anchor" href="#行内元素或行内块元素在布局中的特点" aria-label="Permalink to &quot;行内元素或行内块元素在布局中的特点&quot;">​</a></h2><h3 id="父元素设置的文本属性可以作用于行内元素和行内块元素" tabindex="-1">父元素设置的文本属性可以作用于行内元素和行内块元素 <a class="header-anchor" href="#父元素设置的文本属性可以作用于行内元素和行内块元素" aria-label="Permalink to &quot;父元素设置的文本属性可以作用于行内元素和行内块元素&quot;">​</a></h3><h4 id="_1-让行内块元素在父元素中水平居中" tabindex="-1">① 让行内块元素在父元素中水平居中 <a class="header-anchor" href="#_1-让行内块元素在父元素中水平居中" aria-label="Permalink to &quot;① 让行内块元素在父元素中水平居中&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>给父元素设置 text-align:center</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-让行内块元素在父元素中纵向居中" tabindex="-1">② 让行内块元素在父元素中纵向居中 <a class="header-anchor" href="#_2-让行内块元素在父元素中纵向居中" aria-label="Permalink to &quot;② 让行内块元素在父元素中纵向居中&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 给父元素设置行高</span></span>
<span class="line"><span>2. 给行内块元素设置 vertical-align:middle</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="行内元素或行内块元素之间的空白问题" tabindex="-1">行内元素或行内块元素之间的空白问题 <a class="header-anchor" href="#行内元素或行内块元素之间的空白问题" aria-label="Permalink to &quot;行内元素或行内块元素之间的空白问题&quot;">​</a></h3><h4 id="_1-元素之间的空白-左右" tabindex="-1">① 元素之间的空白（左右） <a class="header-anchor" href="#_1-元素之间的空白-左右" aria-label="Permalink to &quot;① 元素之间的空白（左右）&quot;">​</a></h4><p><strong>产生原因：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>代码中，元素之间的换行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>解决方案：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>方案一： 代码中，元素之间不写换行（不推荐）</span></span>
<span class="line"><span>方案二： 父元素设置字体大小为0； 如果行内块元素中还有文字单独设置字体大小。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-底部的空白-图片的幽灵空白" tabindex="-1">② 底部的空白（图片的幽灵空白） <a class="header-anchor" href="#_2-底部的空白-图片的幽灵空白" aria-label="Permalink to &quot;② 底部的空白（图片的幽灵空白）&quot;">​</a></h4><p><strong>产生原因：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>行内块元素与文字基线对齐，底部的空白就是基线与底线的距离</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>解放方案：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>方案一： 父元素设置字体大小 0</span></span>
<span class="line"><span>方案二： 给行内块元素设置 vertical-align:bottom (推荐)</span></span>
<span class="line"><span>方案三： 经典解决方案，针对图片，将图片设置成块级元素</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-文字内容个数不同的行内块元素水平排列无法对齐" tabindex="-1">③ 文字内容个数不同的行内块元素水平排列无法对齐 <a class="header-anchor" href="#_3-文字内容个数不同的行内块元素水平排列无法对齐" aria-label="Permalink to &quot;③ 文字内容个数不同的行内块元素水平排列无法对齐&quot;">​</a></h4><p><strong>产生原因：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 如果行内块元素中没有文字，该元素的底部与基线对齐</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 如果行内块元素中有一行文字，文字与外面的基线对齐，进而影响行内块元素的位置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 如果行内块元素中有多行文字，最后一行文字与外面的基线对齐，进而影响行内块元素的位置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>解决方案：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">给行内块元素设置 vertical</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">align, 值不是 baseline 都可以解决问题</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,50),p=[l];function t(r,h,d,c,o,b){return n(),a("div",null,p)}const g=s(e,[["render",t]]);export{k as __pageData,g as default};
