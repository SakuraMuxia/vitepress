import{_ as e,c as o,o as a,a5 as c}from"./chunks/framework.ysm0ofoH.js";const M=JSON.parse('{"title":"HTML5 概述","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/01-HTML5CSS3/18-HTML5概述.md","filePath":"front-end/01-HTML5CSS3/18-HTML5概述.md"}'),d={name:"front-end/01-HTML5CSS3/18-HTML5概述.md"},t=c('<h1 id="html5-概述" tabindex="-1">HTML5 概述 <a class="header-anchor" href="#html5-概述" aria-label="Permalink to &quot;HTML5 概述&quot;">​</a></h1><p>HTML5 是下一代 HTML 标准，2014年10月由万维网联盟（W3C）完成标准制定。</p><h2 id="_1-html5-的由来" tabindex="-1">1 HTML5 的由来 <a class="header-anchor" href="#_1-html5-的由来" aria-label="Permalink to &quot;1 HTML5 的由来&quot;">​</a></h2><ul><li>HTML5草案的前身名为 Web Applications 1.0，于2004年被 <strong>WHATWG</strong> 提出，于2007年被 <strong>W3C</strong> 接纳，并成立了新的 HTML 工作团队。</li><li>HTML 5 的第一份正式草案已于2008年1月22日公布。HTML5 仍处于完善之中。然而，大部分现代浏览器已经具备了某些 HTML5 支持。</li><li>2012年12月17日，万维网联盟（W3C）正式宣布凝结了大量网络工作者心血的HTML5规范已经正式定稿。根据W3C的发言稿称：“HTML5是开放的Web网络平台的奠基石。”</li><li>2013年5月6日， HTML 5.1正式草案公布。该规范定义了第五次重大版本，第一次要修订万维网的核心语言：超文本标记语言（HTML）。在这个版本中，新功能不断推出，以帮助Web应用程序的作者，努力提高新元素互操作性。</li><li>2014年10月29日，万维网联盟宣布，经过接近8年的艰苦努力，该标准规范终于制定完成。</li></ul><h2 id="_2-html5-优势" tabindex="-1">2 HTML5 优势 <a class="header-anchor" href="#_2-html5-优势" aria-label="Permalink to &quot;2 HTML5 优势&quot;">​</a></h2><ol><li>更好的语义化：HTML5 引入了一些新的标签和属性，例如 <code>header</code>、<code>nav</code>、<code>section</code>、<code>article</code>、<code>footer</code>、<code>aside</code> 等，这些标签有助于将网页分成逻辑部分，并提高了页面的语义化，有助于搜索引擎优化和无障碍访问。</li><li>更丰富的多媒体支持：HTML5 增加了 <code>audio</code> 和 <code>video</code> 标签，使得在网页上嵌入音频和视频变得更加容易和无缝。此外，HTML5 还增加了一些新的 API，如 <code>canvas</code>、<code>webgl</code> 和 <code>webaudio</code>，可以更加轻松地在网页上进行图形和音频处理。</li><li>更好的离线应用支持：HTML5 提供了 <code>localStorage</code> 和 <code>sessionStorage</code> API，这些 API 允许 Web 应用程序将数据存储在本地，并在没有网络连接时使用这些数据。</li><li>更好的表单支持：HTML5 增加了一些新的表单控件和属性，例如 <code>datalist</code>、<code>date</code>、<code>time</code>、<code>color</code>、<code>range</code>、<code>number</code> 等，使得表单更加易用和灵活，并且可以提供更好的用户体验。</li><li>更好的跨平台支持：HTML5 引入了一些新的技术，如 Web Workers、Web Sockets 和 Web Storage，使得 Web 应用程序可以在不同的平台和设备上更加高效地运行，并且可以实现更好的交互性和响应性。</li></ol>',6),l=[t];function i(r,n,s,T,_,H){return a(),o("div",null,l)}const h=e(d,[["render",i]]);export{M as __pageData,h as default};
