import{_ as s,c as a,o as n,a5 as i}from"./chunks/framework.ysm0ofoH.js";const u=JSON.parse('{"title":"JS数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/02-JavaScript/01-数据类型.md","filePath":"front-end/02-JavaScript/01-数据类型.md"}'),e={name:"front-end/02-JavaScript/01-数据类型.md"},l=i(`<h1 id="js数据类型" tabindex="-1">JS数据类型 <a class="header-anchor" href="#js数据类型" aria-label="Permalink to &quot;JS数据类型&quot;">​</a></h1><h2 id="js语法规范" tabindex="-1">JS语法规范 <a class="header-anchor" href="#js语法规范" aria-label="Permalink to &quot;JS语法规范&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">----------------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTML中 设置元素的 id 使用小驼峰，设置 类名 时使用短横线</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">如果在html中设置自定义属性名为标准形式</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`data-home-address=&quot;&quot;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，则在JS语法中使用属性名就不需要带 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`data-\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">前缀，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`data-\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">后的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`home-address\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">中的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,会自动映射成小驼峰的形式，</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">如</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`imgEle.dataset.homeAddress;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">----------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JS中变量使用小驼峰的格式，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">构造函数的变量名推荐使用首字母大写的方式。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">对象中的属性名使用</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,如果是小驼峰的形式可以省略</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="javascript-概述" tabindex="-1">JavaScript 概述 <a class="header-anchor" href="#javascript-概述" aria-label="Permalink to &quot;JavaScript 概述&quot;">​</a></h2><h3 id="_1-什么是-javascript" tabindex="-1">① 什么是 JavaScript <a class="header-anchor" href="#_1-什么是-javascript" aria-label="Permalink to &quot;① 什么是 JavaScript&quot;">​</a></h3><p>JavaScript 是一门<strong>动态的</strong>，<strong>弱类型</strong>的，<strong>解释型</strong>的，<strong>基于对象</strong>的<strong>脚本</strong>语言。</p><blockquote><p><strong>动态：</strong> 程序执行的时候才会确定数据类型。 <strong>静态：</strong> 书写代码的时候提前确定数据类型。</p><p><strong>弱类型：</strong> 数据类型可以自动转换。 <strong>强类型：</strong> 数据类型无法自动转换。</p><p><strong>解释型：</strong> 边编译，边运行，开发效率更高。 <strong>编译型：</strong> 边编译，边运行，开发效率更高。</p><p>**脚本：**一般都是可以嵌在其它计算机语言当中执行。</p></blockquote><h3 id="_2-javascript-的运行环境-解释器" tabindex="-1">② javaScript 的运行环境（解释器） <a class="header-anchor" href="#_2-javascript-的运行环境-解释器" aria-label="Permalink to &quot;② javaScript 的运行环境（解释器）&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 浏览器，如Chrome浏览器中的V8引擎</span></span>
<span class="line"><span>2. Node.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-浏览器端的-javascript-组成部分" tabindex="-1">③ 浏览器端的 JavaScript 组成部分 <a class="header-anchor" href="#_3-浏览器端的-javascript-组成部分" aria-label="Permalink to &quot;③ 浏览器端的 JavaScript 组成部分&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 基本代码语法， ECMAScript，ECMA指定</span></span>
<span class="line"><span>2. BOM， 浏览器提供的API，W3C指定</span></span>
<span class="line"><span>3. DOM， 文档提供的API，W3C指定</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="javascript-基本语法" tabindex="-1">JavaScript 基本语法 <a class="header-anchor" href="#javascript-基本语法" aria-label="Permalink to &quot;JavaScript 基本语法&quot;">​</a></h2><h3 id="javascript-在-html-中使用的三种方式" tabindex="-1">JavaScript 在 HTML 中使用的三种方式 <a class="header-anchor" href="#javascript-在-html-中使用的三种方式" aria-label="Permalink to &quot;JavaScript 在 HTML 中使用的三种方式&quot;">​</a></h3><h4 id="_1-行内式-内联脚本" tabindex="-1">① 行内式（内联脚本） <a class="header-anchor" href="#_1-行内式-内联脚本" aria-label="Permalink to &quot;① 行内式（内联脚本）&quot;">​</a></h4><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">元素</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onclick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;代码..&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ondblclick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;代码..&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">元素</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-内嵌式-嵌入脚本" tabindex="-1">② 内嵌式（嵌入脚本） <a class="header-anchor" href="#_2-内嵌式-嵌入脚本" aria-label="Permalink to &quot;② 内嵌式（嵌入脚本）&quot;">​</a></h4><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script标签写在页面的任何位置都会执行到，建议写在其他所有元素的后面</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-外链式-外部脚本" tabindex="-1">③ 外链式（外部脚本） <a class="header-anchor" href="#_3-外链式-外部脚本" aria-label="Permalink to &quot;③ 外链式（外部脚本）&quot;">​</a></h4><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;js文件的地址&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script标签写在页面的任何位置都会执行到，建议写在其他所有元素的后面</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="javascript-注释" tabindex="-1">JavaScript 注释 <a class="header-anchor" href="#javascript-注释" aria-label="Permalink to &quot;JavaScript 注释&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单行注释</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;OK&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你好&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注释本行后面的部分</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    多行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    alert(100);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    alert(100);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    alert(100);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    alert(100);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    alert(100);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="javascript-的其他语法特点" tabindex="-1">JavaScript 的其他语法特点 <a class="header-anchor" href="#javascript-的其他语法特点" aria-label="Permalink to &quot;JavaScript 的其他语法特点&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 指令结束符（语句结束符）是分号或者换行</span></span>
<span class="line"><span>2. 严格区分大小写</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="javascript-中输出内容" tabindex="-1">JavaScript 中输出内容 <a class="header-anchor" href="#javascript-中输出内容" aria-label="Permalink to &quot;JavaScript 中输出内容&quot;">​</a></h2><h3 id="_1-输出到弹框" tabindex="-1">① 输出到弹框 <a class="header-anchor" href="#_1-输出到弹框" aria-label="Permalink to &quot;① 输出到弹框&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(内容)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-输出到页面中" tabindex="-1">② 输出到页面中 <a class="header-anchor" href="#_2-输出到页面中" aria-label="Permalink to &quot;② 输出到页面中&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(内容)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-输出到控制台" tabindex="-1">③ 输出到控制台 <a class="header-anchor" href="#_3-输出到控制台" aria-label="Permalink to &quot;③ 输出到控制台&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(内容)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><h3 id="数据、直接量、变量" tabindex="-1">数据、直接量、变量 <a class="header-anchor" href="#数据、直接量、变量" aria-label="Permalink to &quot;数据、直接量、变量&quot;">​</a></h3><p><strong>数据：</strong></p><p><strong>直接量：</strong> 直接表示数据的方式，如 <code>250</code>、<code>hello</code> 等。</p><p><strong>变量：</strong> 将数据取个名字，通过该名字就可以使用数据。</p><h3 id="变量的意义" tabindex="-1">变量的意义 <a class="header-anchor" href="#变量的意义" aria-label="Permalink to &quot;变量的意义&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 通过变量方便某个数据的多次使用</span></span>
<span class="line"><span>2. 通过变量保证数据的一致性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="变量的语法" tabindex="-1">变量的语法 <a class="header-anchor" href="#变量的语法" aria-label="Permalink to &quot;变量的语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建一个变量 声明一个变量 使用关键字 var</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num01;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 给变量赋值  在使用变量 使用变量不需要var</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num01 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 250</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建变量并赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num02 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改变量的值 给变量重新赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num02 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 num02 的值赋值给 num01</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num01 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num02;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用没有值的变量，可以自动得到 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用不存在的变量，报错！因为本身就没有，如果是window.变量形式，这样的方式使用对象的属性，使用不存在的属性，报undefined，因为对象window是存在的。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="变量名的命名规范-标识符的命名规范" tabindex="-1">变量名的命名规范（标识符的命名规范） <a class="header-anchor" href="#变量名的命名规范-标识符的命名规范" aria-label="Permalink to &quot;变量名的命名规范（标识符的命名规范）&quot;">​</a></h3><h4 id="_1-强制规范" tabindex="-1">① 强制规范 <a class="header-anchor" href="#_1-强制规范" aria-label="Permalink to &quot;① 强制规范&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 变量名可以由数字、字母、下划线、$ 组成且不能以数字开头</span></span>
<span class="line"><span>2. 变量名不能是关键字或保留字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-建议规范" tabindex="-1">② 建议规范 <a class="header-anchor" href="#_2-建议规范" aria-label="Permalink to &quot;② 建议规范&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 请使用有意义的词语作为变量名</span></span>
<span class="line"><span>2. 变量名如果多个词语组成，建议使用小驼峰命名法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">小驼峰命名法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 首字母小写，每一个单词的开头字母大写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxlength </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxLength</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 基本结构：xxxYyyZzz</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JS变量名通常都会使用小驼峰</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">大驼峰命名法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 首字母大写，每一个单词的开头字母大写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MaxLength</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 基本结构：XxxYyyZzz</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 大驼峰用于类名的设置</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">帕斯卡命名法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 所有的字母都小写，单词之间使用_隔开</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxlength </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max_length</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 基本结构：xxx_yyy_zzz</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在JS中使用的并不常见</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="数据类型的划分" tabindex="-1">数据类型的划分 <a class="header-anchor" href="#数据类型的划分" aria-label="Permalink to &quot;数据类型的划分&quot;">​</a></h3><h4 id="_1-原始类型-基本类型" tabindex="-1">① 原始类型（基本类型） <a class="header-anchor" href="#_1-原始类型-基本类型" aria-label="Permalink to &quot;① 原始类型（基本类型）&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>number		数字</span></span>
<span class="line"><span>string		字符串</span></span>
<span class="line"><span>boolean		布尔</span></span>
<span class="line"><span>null		空</span></span>
<span class="line"><span>undefined	未定义</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-对象类型-复合类型" tabindex="-1">② 对象类型（复合类型） <a class="header-anchor" href="#_2-对象类型-复合类型" aria-label="Permalink to &quot;② 对象类型（复合类型）&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>array		数组</span></span>
<span class="line"><span>function	函数</span></span>
<span class="line"><span>object		对象</span></span>
<span class="line"><span>date		日期</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="判断数据的类型" tabindex="-1">判断数据的类型 <a class="header-anchor" href="#判断数据的类型" aria-label="Permalink to &quot;判断数据的类型&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(数据)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="number-数值类型" tabindex="-1">number 数值类型 <a class="header-anchor" href="#number-数值类型" aria-label="Permalink to &quot;number 数值类型&quot;">​</a></h3><h4 id="_1-整型" tabindex="-1">① 整型 <a class="header-anchor" href="#_1-整型" aria-label="Permalink to &quot;① 整型&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">764</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 十进制表示</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">012</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 八进制表示     只能用于表示整数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 十六进制表示    只能用于表示整数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-浮点型" tabindex="-1">② 浮点型 <a class="header-anchor" href="#_2-浮点型" aria-label="Permalink to &quot;② 浮点型&quot;">​</a></h4><p><strong>浮点数的运算存在精度问题：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.30000000000000004</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-科学计数法" tabindex="-1">③ 科学计数法 <a class="header-anchor" href="#_3-科学计数法" aria-label="Permalink to &quot;③ 科学计数法&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.3e4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; 	 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 13000</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.67e78</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.3e-2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 0.023;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_4-nan" tabindex="-1">④ NaN <a class="header-anchor" href="#_4-nan" aria-label="Permalink to &quot;④ NaN&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 什么是 NaN  </span></span>
<span class="line"><span>   NaN，全称 Not a Number，是 number 类型的一种</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. NaN 的特点</span></span>
<span class="line"><span>   1.1 NaN 与任何数字进行任何计算结果都是 NaN</span></span>
<span class="line"><span>   1.2 NaN 与任何数字都不相等，包括自己</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. isNaN() 函数 </span></span>
<span class="line"><span>   如果要判断的数据是NaN或者转为number的时候能转成NaN，结果就是true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_5-javascript-中数字的有效范围" tabindex="-1">⑤ JavaScript 中数字的有效范围 <a class="header-anchor" href="#_5-javascript-中数字的有效范围" aria-label="Permalink to &quot;⑤  JavaScript 中数字的有效范围&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. JS 中能表示的最大的数字：  1.7976931348623157e+308</span></span>
<span class="line"><span>2. JS 中能表示的最小的正数：  5e-324</span></span>
<span class="line"><span>3. 如果超出有效范围，用 Infinity、-Infinity 表示</span></span>
<span class="line"><span>4. 函数 isFinite() 可以判断一个数字是否是有效数字，如果是有效数字结果是true</span></span>
<span class="line"><span>   无效数字： Infinity、-Infinity、NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="string-字符串类型" tabindex="-1">string 字符串类型 <a class="header-anchor" href="#string-字符串类型" aria-label="Permalink to &quot;string 字符串类型&quot;">​</a></h3><h4 id="_1-字符串的表示方式" tabindex="-1">① 字符串的表示方式 <a class="header-anchor" href="#_1-字符串的表示方式" aria-label="Permalink to &quot;① 字符串的表示方式&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 需要使用单引号或双引号表示字符串的直接量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单引号定义的字符串内容中不要有单引号，双引号定义的字符串内容中不要有双引号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg01 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello&quot;高小乐&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg02 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;你好&#39;老头乐&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_2-转义字符" tabindex="-1">② 转义字符 <a class="header-anchor" href="#_2-转义字符" aria-label="Permalink to &quot;② 转义字符&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>\\n			换行</span></span>
<span class="line"><span>\\&#39;			单引号</span></span>
<span class="line"><span>\\&quot;			双引号</span></span>
<span class="line"><span>\\\\			转义\\本身</span></span>
<span class="line"><span>\\uXXXX 		四位十六进制表示unicode字符串</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="boolean-布尔类型" tabindex="-1">boolean 布尔类型 <a class="header-anchor" href="#boolean-布尔类型" aria-label="Permalink to &quot;boolean 布尔类型&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>true		表示是、肯定、正确</span></span>
<span class="line"><span>false		表示否、否定、错误</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="null-和-undefined" tabindex="-1">null 和 undefined <a class="header-anchor" href="#null-和-undefined" aria-label="Permalink to &quot;null 和 undefined&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>null			空，如果创建了一个变量，暂时不知道赋什么值，可以先赋值null</span></span>
<span class="line"><span>undefiend		未定义，没有赋值的变量在使用的时候会自动得到undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h2><h3 id="数据类型转换的规则" tabindex="-1">数据类型转换的规则 <a class="header-anchor" href="#数据类型转换的规则" aria-label="Permalink to &quot;数据类型转换的规则&quot;">​</a></h3><h4 id="_1-其他类型转为-number-类型" tabindex="-1">① 其他类型转为 number 类型 <a class="header-anchor" href="#_1-其他类型转为-number-类型" aria-label="Permalink to &quot;① 其他类型转为 number 类型&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">其他类型数据转为数值类， </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">使用Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    字符串：  纯数字字符串转为对应数字、空字符串转为0， 其他都是NaN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    布尔值： </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">： 转为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 转为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">其他类型数据转为数值类， </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">使用parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()和parseFloat函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    用于从字符串中提取数字，其他类型的数据都是转为NaN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    以数字开头或者纯数字，可用从字符串中提取数字部分；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    空字符转为NaN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parseInt获取小数点之后，提取整数；parseFloat提取浮点数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>string 转为 number：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, 纯数字字符串转为对应的数字，如 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;12.23&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0xab&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2.2e2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 等</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 空字符串转为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 其他形式的字符串转为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表示一种状态。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>字符串转number之前，会自动去掉两端所有的空格！取掉空格之后剩下的内容再转。</p></blockquote><p><strong>boolean 转为 number：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>true -&gt; 1</span></span>
<span class="line"><span>false -&gt; 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>undefined 转为 number：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>转为 NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>null 转为 number：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>转为 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-其他类型转为-string-类型" tabindex="-1">② 其他类型转为 string 类型 <a class="header-anchor" href="#_2-其他类型转为-string-类型" aria-label="Permalink to &quot;② 其他类型转为 string 类型&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">数据是什么样转为字符串，变为字符串中的内容</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">数字转为字符串： 原样转换， 十六机制和科学计数法表示的数字转换后是十进制的数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">其他类型，原样转换输出</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3-其他类型转为-boolean-类型" tabindex="-1">③ 其他类型转为 boolean 类型 <a class="header-anchor" href="#_3-其他类型转为-boolean-类型" aria-label="Permalink to &quot;③ 其他类型转为 boolean 类型&quot;">​</a></h4><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">数字转为布尔值： 0转为false；其他都是true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">字符串转为布尔值：  空字符串转为false， 其他都是true</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 转为 flase</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 转为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>number -&gt; boolean：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 0、NaN 转为 false</span></span>
<span class="line"><span>2. 其他数字都转为 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>string -&gt; boolean：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 空字符转为 false</span></span>
<span class="line"><span>2. 其他字符串转为 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>字符串转 boolean 的时候，不会去掉两端的空格！</p></blockquote><p><strong>undefined -&gt; boolean：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>转为 false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>null -&gt; boolean：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>转为 false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="强制类型转换-显示转换" tabindex="-1">强制类型转换（显示转换） <a class="header-anchor" href="#强制类型转换-显示转换" aria-label="Permalink to &quot;强制类型转换（显示转换）&quot;">​</a></h3><h4 id="_1-强制把其他类型转为-number-类型的函数" tabindex="-1">① 强制把其他类型转为 number 类型的函数 <a class="header-anchor" href="#_1-强制把其他类型转为-number-类型的函数" aria-label="Permalink to &quot;① 强制把其他类型转为 number 类型的函数&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Number()</span></span>
<span class="line"><span>parseInt()			提取字符串中的数字的整数部分</span></span>
<span class="line"><span>parseFloat()	    提取字符串中的数字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>parseInt()、parseFloat() 与 Number() 的区别：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. parseInt()、parseFloat() 如果不是字符串，全部转为 NaN</span></span>
<span class="line"><span>2. parseInt()、parseFloat() 纯数字字符串、以数字开头的字符串转为有效数字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>parseFloat() 和 parseInt 的区别：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>parseInt()			提取字符串中的数字的整数部分</span></span>
<span class="line"><span>parseFloat()	    提取字符串中的数字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>可以使用 parseInt 来提取数字中的整数部分！</p></blockquote><h4 id="_2-强制把其他类型转为-string-类型的函数" tabindex="-1">② 强制把其他类型转为 string 类型的函数 <a class="header-anchor" href="#_2-强制把其他类型转为-string-类型的函数" aria-label="Permalink to &quot;② 强制把其他类型转为 string 类型的函数&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>String()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-强制把其他类型转为-boolean-类型的函数" tabindex="-1">③ 强制把其他类型转为 boolean 类型的函数 <a class="header-anchor" href="#_3-强制把其他类型转为-boolean-类型的函数" aria-label="Permalink to &quot;③ 强制把其他类型转为 boolean 类型的函数&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Boolean();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="自动类型转换-隐式转换" tabindex="-1">自动类型转换（隐式转换） <a class="header-anchor" href="#自动类型转换-隐式转换" aria-label="Permalink to &quot;自动类型转换（隐式转换）&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1. 如果数据不是当前运算环境所需要的类型，就会发生数据类型自动转换，转换规则与强制类型转换一致</span></span>
<span class="line"><span>2. 当前运算环境一般由运算符决定</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>JavaScript 是弱类型语言，所以可以进行自动类型转换。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>在某种运算环境下，数据自动转换类型：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>数值的运算环境，  表达式中有数字运算符： + - * / % ++ --</span></span>
<span class="line"><span>字符串的运算环境， 表达式中有+，且一边是字符串， 另外边的数据肯定自动转为字符串</span></span>
<span class="line"><span>布尔值的运算环境， 条件判断的时候 if (数据)  数据会自动转为布尔值</span></span>
<span class="line"><span>自动类型转换的规则同强制类型转换的规则是一致的。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="prompt数据类型转换" tabindex="-1">prompt数据类型转换 <a class="header-anchor" href="#prompt数据类型转换" aria-label="Permalink to &quot;prompt数据类型转换&quot;">​</a></h3><p>var num = +prompt(&#39;请输入一个数&#39;)；prompt前加+能把变量转化为数字型</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取相关元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input01 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#input01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input02 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#input02&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#btn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resBox </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#res&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建子线程  子线程的代码会执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> worker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./child.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 点击计算按钮 向子线程发送数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 定义向子线程发送的数据 ‘+’ String 自动转换为 Number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input01.value, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input02.value] </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 向子线发送数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">postMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nums);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,120),p=[l];function t(r,h,d,k,c,o){return n(),a("div",null,p)}const g=s(e,[["render",t]]);export{u as __pageData,g as default};
