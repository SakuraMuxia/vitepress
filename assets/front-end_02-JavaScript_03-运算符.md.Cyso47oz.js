import{_ as s,c as t,o as a,a5 as i}from"./chunks/framework.ysm0ofoH.js";const u=JSON.parse('{"title":"运算符","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/02-JavaScript/03-运算符.md","filePath":"front-end/02-JavaScript/03-运算符.md"}'),n={name:"front-end/02-JavaScript/03-运算符.md"},e=i(`<h1 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h1><h2 id="运算符和表达式" tabindex="-1">运算符和表达式 <a class="header-anchor" href="#运算符和表达式" aria-label="Permalink to &quot;运算符和表达式&quot;">​</a></h2><h3 id="_1-运算符" tabindex="-1">① 运算符 <a class="header-anchor" href="#_1-运算符" aria-label="Permalink to &quot;① 运算符&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 运算符就是参与运算的符号，像+、-、</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">、/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 等。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 与运算符一起运算的数据称之为操作数。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-表达式" tabindex="-1">② 表达式 <a class="header-anchor" href="#_2-表达式" aria-label="Permalink to &quot;② 表达式&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 数据、运算符可以共同组成一个表达式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表达式具有计算结果，称为表达式的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 一个变量、一个直接量也可以算作表达式，称为原始表达式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 多个简单的表达式可以组成复杂的表达式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 有些表达式具有副作用，除了能得到表达式的计算结果，会被参与运算符的操作数进行修改，表达式有没有副作用由运算符决定。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="运算符的分类" tabindex="-1">运算符的分类 <a class="header-anchor" href="#运算符的分类" aria-label="Permalink to &quot;运算符的分类&quot;">​</a></h2><h3 id="_1-按照运算符需要的操作数的个数" tabindex="-1">① 按照运算符需要的操作数的个数 <a class="header-anchor" href="#_1-按照运算符需要的操作数的个数" aria-label="Permalink to &quot;① 按照运算符需要的操作数的个数&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">一元运算符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">二元运算符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">三元运算符</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-按照运算符的功能" tabindex="-1">② 按照运算符的功能 <a class="header-anchor" href="#_2-按照运算符的功能" aria-label="Permalink to &quot;② 按照运算符的功能&quot;">​</a></h3><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 算术运算符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 关系运算符、比较运算符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 逻辑运算符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 位运算符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">5.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 赋值运算符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">6.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 其他运算符</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="运算符讲解-按照功能" tabindex="-1">运算符讲解（按照功能） <a class="header-anchor" href="#运算符讲解-按照功能" aria-label="Permalink to &quot;运算符讲解（按照功能）&quot;">​</a></h2><h3 id="_1-算术运算符" tabindex="-1">① 算术运算符 <a class="header-anchor" href="#_1-算术运算符" aria-label="Permalink to &quot;① 算术运算符&quot;">​</a></h3><table><thead><tr><th>运算符</th><th>含义</th><th>操作数个数</th><th>操作数的类型要求</th><th>组成的表达式的值的类型</th><th>有无副作用</th></tr></thead><tbody><tr><td>+</td><td>相加</td><td>2</td><td>number</td><td>number</td><td>无</td></tr><tr><td>-</td><td>相减</td><td>2</td><td>number</td><td>number</td><td>无</td></tr><tr><td>*</td><td>相乘</td><td>2</td><td>number</td><td>number</td><td>无</td></tr><tr><td>/</td><td>相除</td><td>2</td><td>number</td><td>number</td><td>无</td></tr><tr><td>%</td><td>取余</td><td>2</td><td>number</td><td>number</td><td>无</td></tr><tr><td>+</td><td>正号</td><td>1</td><td>number</td><td>number</td><td>无</td></tr><tr><td>-</td><td>负号</td><td>1</td><td>number</td><td>number</td><td>无</td></tr><tr><td>++</td><td>累加</td><td>1</td><td>number</td><td>number</td><td>有</td></tr><tr><td>--</td><td>累减</td><td>1</td><td>number</td><td>number</td><td>有</td></tr></tbody></table><p><strong><code>+</code> 什么时候是正号？什么时候是相加？</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 如果操作数个数是1个，+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 是正号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 如果操作数个数是2个，+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 是加号</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>关于表达式的副作用：</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">表达式除了得到计算结果，还会对操作数进行修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">如果发生数据类型自动转换，操作数只能将转完了类型的数据参与运算，而操作数本身没有变化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">有副作用的表达式，要求操作数必须是变量的形式！</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>累加累加减： 运算符在前和在后的区别：</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">操作数在前，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 操作数数没有累加累减前的值作为表达式的值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">运算符在前，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 操作数累加累减之后的值作为表达式的的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-关系运算符-比较运算符" tabindex="-1">② 关系运算符（比较运算符） <a class="header-anchor" href="#_2-关系运算符-比较运算符" aria-label="Permalink to &quot;② 关系运算符（比较运算符）&quot;">​</a></h3><table><thead><tr><th>运算符</th><th>含义</th><th>操作数个数</th><th>操作数的类型要求</th><th>组成的表达式的值的类型</th><th>有无副作用</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td><td>2</td><td>number、string</td><td>boolean</td><td>无</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>2</td><td>number、string</td><td>boolean</td><td>无</td></tr><tr><td>&lt;</td><td>小于</td><td>2</td><td>number、string</td><td>boolean</td><td>无</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>2</td><td>number、string</td><td>boolean</td><td>无</td></tr><tr><td>==</td><td>相等</td><td>2</td><td>俩操作数类型不一致转number<br>类型一致直接看是否相同</td><td>boolean</td><td>无</td></tr><tr><td>!=</td><td>不相等</td><td>2</td><td>俩操作数类型不一致转number<br>类型一致直接看是否相同</td><td>boolean</td><td>无</td></tr><tr><td>===</td><td>全等</td><td>2</td><td>没有要求</td><td>boolean</td><td>无</td></tr><tr><td>!==</td><td>不全等</td><td>2</td><td>没有要求</td><td>boolean</td><td>无</td></tr></tbody></table><p>副作用：要求操作数必须是变量的形式</p><p><strong>字符串比较大小的规则：</strong></p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1. 如果两个操作数都是 string，才会按照字符串的规则比较大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2. 字符串按照顺序，一个字符一个字符的比较，对应的字符大，整个字符串都大，后面的字符不再比较</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">3. 字符使用它的unicode编码比较大小， 如 a是97、A是65</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>null 与其他数据判断相等和不相等（特殊）：</strong></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>全等判断和相等判断的区别：</strong></p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">相等判断： 如果两个操作数类型不一致，转为number 再比较</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">全等判断： 如果两个操作数类型不一致，直接判定为不全等，不会发生数据类型自动转换</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-逻辑运算符" tabindex="-1">③ 逻辑运算符 <a class="header-anchor" href="#_3-逻辑运算符" aria-label="Permalink to &quot;③ 逻辑运算符&quot;">​</a></h3><table><thead><tr><th>运算符</th><th>含义</th><th>操作数个数</th><th>操作数的类型要求</th><th>组成的表达式的值的类型</th><th>有无副作用</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑与</td><td>2</td><td>boolean</td><td>取两个操作数中的一个</td><td>无</td></tr><tr><td>||</td><td>逻辑或</td><td>2</td><td>boolean</td><td>取两个操作数中的一个</td><td>无</td></tr><tr><td>!</td><td>逻辑非</td><td>1</td><td>boolean</td><td>boolean</td><td>无</td></tr></tbody></table><p><strong>逻辑与运算符组成的表达式的值：</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">如果第一个操作数成立，取第二个操作作为表达式的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">如果第一个操作数不成立，取第一个操作作为表达式的值，第二个操作不会被执行到</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>逻辑或运算符组成的表达式的值：</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">如果第一个操作数成立，取第一个操作数作为表达式的值，第二个操作数不会被执行到</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">如果第一个操作数不成立，取第二个操作数作为表达式的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用案例</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">record.children?.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// record没有children属性或者record.children 数组的长度是 0，匹配判断，逻辑判断</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4-赋值运算符" tabindex="-1">④ 赋值运算符 <a class="header-anchor" href="#_4-赋值运算符" aria-label="Permalink to &quot;④ 赋值运算符&quot;">​</a></h3><table><thead><tr><th>运算符</th><th>含义</th><th>操作数个数</th><th>操作数的类型要求</th><th>组成的表达式的值的类型</th><th>有无副作用</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>2</td><td>无要求</td><td>取左边操作数重置赋值之后的值</td><td>有</td></tr><tr><td>+=</td><td>相加赋值</td><td>2</td><td>number</td><td>取左边操作数重置赋值之后的值</td><td>有</td></tr><tr><td>-=</td><td>相减赋值</td><td>2</td><td>number</td><td>取左边操作数重置赋值之后的值</td><td>有</td></tr><tr><td>*=</td><td>相乘赋值</td><td>2</td><td>number</td><td>取左边操作数重置赋值之后的值</td><td>有</td></tr><tr><td>/=</td><td>相除赋值</td><td>2</td><td>number</td><td>取左边操作数重置赋值之后的值</td><td>有</td></tr><tr><td>%=</td><td>取余赋值</td><td>2</td><td>number</td><td>取左边操作数重置赋值之后的值</td><td>有</td></tr><tr><td>+=</td><td>字符连接赋值</td><td>2</td><td>string</td><td>取左边操作数重置赋值之后的值</td><td>有</td></tr></tbody></table><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">赋值运算符左边的操作数必须是变量的形式， 右边的操作数可以是直接量、变量、表达式。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5-其他运算符" tabindex="-1">⑤ 其他运算符 <a class="header-anchor" href="#_5-其他运算符" aria-label="Permalink to &quot;⑤ 其他运算符&quot;">​</a></h3><table><thead><tr><th>运算符</th><th>含义</th><th>操作数个数</th><th>操作数的类型要求</th><th>组成的表达式的值的类型</th><th>有无副作用</th></tr></thead><tbody><tr><td>typeof</td><td>类型判断</td><td>1</td><td>无要求</td><td>string</td><td>无</td></tr><tr><td>,</td><td>逗号</td><td>2</td><td>无要求</td><td>取第二个操作数作为表达式的值</td><td>无</td></tr><tr><td>+</td><td>字符串连接符</td><td>2</td><td>string</td><td>string</td><td>无</td></tr><tr><td>?:</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>+ 什么时候是 相加、字符串连接符或者正号？</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 如果只有一个操作数，</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示正号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 如果有两个操作数，其中只要有一个操作数是string，+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示字符串连接符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 如果有两个操作数，两个操作数都不是string，+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 表示相加</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>条件运算符组成的表达式的取值规则：</strong></p><h3 id="_6条件运算符详解" tabindex="-1">⑥条件运算符详解 <a class="header-anchor" href="#_6条件运算符详解" aria-label="Permalink to &quot;⑥条件运算符详解&quot;">​</a></h3><table><thead><tr><th>运算符</th><th>含义</th><th>操作数个数</th><th>操作数的类型要求</th><th>组成的表达式的值的类型</th><th>有无副作用</th></tr></thead><tbody><tr><td>? :</td><td>条件运算符</td><td>3</td><td>第一个布尔<br>后两个无要求</td><td>取第二个第三个其中的一个</td><td>无</td></tr></tbody></table><p><strong>条件运算符（三元运算符）组成的表达式的取值规则：</strong></p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">如果第一个操作数成立，取第二个操作数作为表达式的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">如果第一个操作数不成立，取第三个操作数作为表达式的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="运算符的优先级" tabindex="-1">运算符的优先级 <a class="header-anchor" href="#运算符的优先级" aria-label="Permalink to &quot;运算符的优先级&quot;">​</a></h2><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1. 一元运算符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">2. 算术运算符  乘除取余</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">加减</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">3. 关系（比较）运算符  比大小 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 判等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">4. 逻辑运算符  &amp;&amp; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">5. 三元运算符 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">6. 赋值运算符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">7. 逗号运算符</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>通过小括号提高优先级！</p></blockquote>`,52),d=[e];function l(p,h,r,k,c,o){return a(),t("div",null,d)}const g=s(n,[["render",l]]);export{u as __pageData,g as default};
