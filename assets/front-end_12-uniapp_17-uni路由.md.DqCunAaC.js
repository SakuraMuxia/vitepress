import{_ as t,c as s,o as i,a5 as a}from"./chunks/framework.ysm0ofoH.js";const o=JSON.parse('{"title":"uni路由","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/12-uniapp/17-uni路由.md","filePath":"front-end/12-uniapp/17-uni路由.md"}'),e={name:"front-end/12-uniapp/17-uni路由.md"},l=a(`<h1 id="uni路由" tabindex="-1">uni路由 <a class="header-anchor" href="#uni路由" aria-label="Permalink to &quot;uni路由&quot;">​</a></h1><p>该组件类似HTML中的<code>&lt;a&gt;</code>组件，但只能跳转本地页面。目标页面必须在pages.json中注册。</p><p>除了组件方式，API方式也可以实现页面跳转，另见：<a href="https://uniapp.dcloud.io/api/router?id=navigateto" target="_blank" rel="noreferrer">https://uniapp.dcloud.io/api/router?id=navigateto</a></p><p><strong>属性说明</strong></p><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">类型</th><th style="text-align:left;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">url</td><td style="text-align:left;">String</td><td style="text-align:left;"></td><td style="text-align:left;">应用内的跳转链接，值为相对路径或绝对路径，如：&quot;../first/first&quot;，&quot;/pages/first/first&quot;，注意不能加 <code>.vue</code> 后缀</td></tr><tr><td style="text-align:left;">open-type</td><td style="text-align:left;">String</td><td style="text-align:left;">navigate</td><td style="text-align:left;">跳转方式</td></tr><tr><td style="text-align:left;">delta</td><td style="text-align:left;">Number</td><td style="text-align:left;"></td><td style="text-align:left;">当 open-type 为 &#39;navigateBack&#39; 时有效，表示回退的层数</td></tr><tr><td style="text-align:left;">animation-type</td><td style="text-align:left;">String</td><td style="text-align:left;">pop-in/out</td><td style="text-align:left;">当 open-type 为 navigate、navigateBack 时有效，窗口的显示/关闭动画效果，详见：<a href="https://uniapp.dcloud.net.cn/api/router#animation" target="_blank" rel="noreferrer">窗口动画</a></td></tr><tr><td style="text-align:left;">animation-duration</td><td style="text-align:left;">Number</td><td style="text-align:left;">300</td><td style="text-align:left;">当 open-type 为 navigate、navigateBack 时有效，窗口显示/关闭动画的持续时间。</td></tr><tr><td style="text-align:left;">render-link</td><td style="text-align:left;">boolean</td><td style="text-align:left;">true</td><td style="text-align:left;">是否给 navigator 组件加一层 a 标签控制 ssr 渲染</td></tr><tr><td style="text-align:left;">hover-class</td><td style="text-align:left;">String</td><td style="text-align:left;">navigator-hover</td><td style="text-align:left;">指定点击时的样式类，当hover-class=&quot;none&quot;时，没有点击态效果</td></tr><tr><td style="text-align:left;">hover-stop-propagation</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">false</td><td style="text-align:left;">指定是否阻止本节点的祖先节点出现点击态</td></tr><tr><td style="text-align:left;">hover-start-time</td><td style="text-align:left;">Number</td><td style="text-align:left;">50</td><td style="text-align:left;">按住后多久出现点击态，单位毫秒</td></tr><tr><td style="text-align:left;">hover-stay-time</td><td style="text-align:left;">Number</td><td style="text-align:left;">600</td><td style="text-align:left;">手指松开后点击态保留时间，单位毫秒</td></tr><tr><td style="text-align:left;">target</td><td style="text-align:left;">String</td><td style="text-align:left;">self</td><td style="text-align:left;">在哪个小程序目标上发生跳转，默认当前小程序，值域self/miniProgram</td></tr></tbody></table><p><strong>open-type 有效值</strong></p><table><thead><tr><th style="text-align:left;">值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">navigate</td><td style="text-align:left;">对应 uni.navigateTo 的功能</td></tr><tr><td style="text-align:left;">redirect</td><td style="text-align:left;">对应 uni.redirectTo 的功能</td></tr><tr><td style="text-align:left;">switchTab</td><td style="text-align:left;">对应 uni.switchTab 的功能</td></tr><tr><td style="text-align:left;">reLaunch</td><td style="text-align:left;">对应 uni.reLaunch 的功能</td></tr><tr><td style="text-align:left;">navigateBack</td><td style="text-align:left;">对应 uni.navigateBack 的功能</td></tr><tr><td style="text-align:left;">exit</td><td style="text-align:left;">退出小程序，target=&quot;miniProgram&quot;时生效</td></tr></tbody></table><h2 id="路由跳转" tabindex="-1">路由跳转 <a class="header-anchor" href="#路由跳转" aria-label="Permalink to &quot;路由跳转&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">页面的跳转方式有两种</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">编程式导航	类似于vue中 router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">声明式导航 	类似于vue中 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;...&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">新建一个文件夹detail,用于存放详情的页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">设置页面的标题</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="声明式导航" tabindex="-1">声明式导航 <a class="header-anchor" href="#声明式导航" aria-label="Permalink to &quot;声明式导航&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigitor 组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[属性]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url				当前小程序内的跳转链接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		跳转方式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">navigitor</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open-type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;navigate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">navigitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;reLaunch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 关闭所有页面，</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">打开到应用内的某个页面</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(能跳到tabbar)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;navigate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 保留当前页面，</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">跳转到应用内的某个页面</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(不能跳到tabbar)，默认</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;redirect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 关闭当前页面，</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">跳转到应用内的某个页面</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(不能跳到tabbar)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/pages/shopcart/shopcart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;reLaunch&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon_wrap flex&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">van</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">icon name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shopping-cart&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#666&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;22px&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">van</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;购物车</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">view</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="uni请求" tabindex="-1">uni请求 <a class="header-anchor" href="#uni请求" aria-label="Permalink to &quot;uni请求&quot;">​</a></h2><h3 id="uni-request-object" tabindex="-1">uni.request(OBJECT) <a class="header-anchor" href="#uni-request-object" aria-label="Permalink to &quot;uni.request(OBJECT)&quot;">​</a></h3><p>发起网络请求。</p><p><strong>OBJECT 参数说明</strong></p><table><thead><tr><th style="text-align:left;">参数名</th><th style="text-align:left;">类型</th><th style="text-align:left;">必填</th><th style="text-align:left;">默认值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">url</td><td style="text-align:left;">String</td><td style="text-align:left;">是</td><td style="text-align:left;"></td><td style="text-align:left;">开发者服务器接口地址</td></tr><tr><td style="text-align:left;">data</td><td style="text-align:left;">Object/String/ArrayBuffer</td><td style="text-align:left;">否</td><td style="text-align:left;"></td><td style="text-align:left;">请求的参数</td></tr><tr><td style="text-align:left;">header</td><td style="text-align:left;">Object</td><td style="text-align:left;">否</td><td style="text-align:left;"></td><td style="text-align:left;">设置请求的 header，header 中不能设置 Referer</td></tr><tr><td style="text-align:left;">method</td><td style="text-align:left;">String</td><td style="text-align:left;">否</td><td style="text-align:left;">GET</td><td style="text-align:left;">有效值详见下方说明</td></tr><tr><td style="text-align:left;">timeout</td><td style="text-align:left;">Number</td><td style="text-align:left;">否</td><td style="text-align:left;">60000</td><td style="text-align:left;">超时时间，单位 ms</td></tr><tr><td style="text-align:left;">dataType</td><td style="text-align:left;">String</td><td style="text-align:left;">否</td><td style="text-align:left;">json</td><td style="text-align:left;">如果设为 json，会对返回的数据进行一次 JSON.parse，非 json 不会进行 JSON.parse</td></tr><tr><td style="text-align:left;">responseType</td><td style="text-align:left;">String</td><td style="text-align:left;">否</td><td style="text-align:left;">text</td><td style="text-align:left;">设置响应的数据类型。合法值：text、arraybuffer</td></tr><tr><td style="text-align:left;">sslVerify</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">true</td><td style="text-align:left;">验证 ssl 证书</td></tr><tr><td style="text-align:left;">withCredentials</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">跨域请求时是否携带凭证（cookies）</td></tr><tr><td style="text-align:left;">firstIpv4</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">DNS解析时优先使用ipv4</td></tr><tr><td style="text-align:left;">enableHttp2</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">开启 http2</td></tr><tr><td style="text-align:left;">enableQuic</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">开启 quic</td></tr><tr><td style="text-align:left;">enableCache</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">开启 cache</td></tr><tr><td style="text-align:left;">enableHttpDNS</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">是否开启 HttpDNS 服务。如开启，需要同时填入 httpDNSServiceId 。 HttpDNS 用法详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/HTTPDNS.html" target="_blank" rel="noreferrer">移动解析HttpDNS</a></td></tr><tr><td style="text-align:left;">httpDNSServiceId</td><td style="text-align:left;">String</td><td style="text-align:left;">否</td><td style="text-align:left;"></td><td style="text-align:left;">HttpDNS 服务商 Id。 HttpDNS 用法详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/HTTPDNS.html" target="_blank" rel="noreferrer">移动解析HttpDNS</a></td></tr><tr><td style="text-align:left;">enableChunked</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">开启 transfer-encoding chunked</td></tr><tr><td style="text-align:left;">forceCellularNetwork</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">wifi下使用移动网络发送请求</td></tr><tr><td style="text-align:left;">enableCookie</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">开启后可在headers中编辑cookie</td></tr><tr><td style="text-align:left;">cloudCache</td><td style="text-align:left;">Object/Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">是否开启云加速（详见<a href="https://smartprogram.baidu.com/docs/develop/extended/component-codeless/cloud-speed/introduction/" target="_blank" rel="noreferrer">云加速服务</a>）</td></tr><tr><td style="text-align:left;">defer</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">否</td><td style="text-align:left;">false</td><td style="text-align:left;">控制当前请求是否延时至首屏内容渲染后发送</td></tr><tr><td style="text-align:left;">success</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;"></td><td style="text-align:left;">收到开发者服务器成功返回的回调函数</td></tr><tr><td style="text-align:left;">fail</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;"></td><td style="text-align:left;">接口调用失败的回调函数</td></tr><tr><td style="text-align:left;">complete</td><td style="text-align:left;">Function</td><td style="text-align:left;">否</td><td style="text-align:left;"></td><td style="text-align:left;">接口调用结束的回调函数（调用成功、失败都会执行）</td></tr></tbody></table><p><strong>success 返回参数说明</strong></p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">data</td><td style="text-align:left;">Object/String/ArrayBuffer</td><td style="text-align:left;">开发者服务器返回的数据</td></tr><tr><td style="text-align:left;">statusCode</td><td style="text-align:left;">Number</td><td style="text-align:left;">开发者服务器返回的 HTTP 状态码</td></tr><tr><td style="text-align:left;">header</td><td style="text-align:left;">Object</td><td style="text-align:left;">开发者服务器返回的 HTTP Response Header</td></tr><tr><td style="text-align:left;">cookies</td><td style="text-align:left;"></td><td style="text-align:left;">开发者服务器返回的 cookies，格式为字符串数组</td></tr></tbody></table><p><strong>示例</strong></p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">写法方式1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		url:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			arrs.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.data </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">写法方式2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		url:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		arrs.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.data </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">写法方式3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		url:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	})	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	arrs.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.data </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><strong>请求参数</strong></p><p><strong>data 数据说明</strong></p><p>最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String。转换规则如下：</p><ul><li>对于 <code>GET</code> 方法，会将数据转换为 query string。例如 <code>{ name: &#39;name&#39;, age: 18 }</code> 转换后的结果是 <code>name=name&amp;age=18</code>。</li><li>对于 <code>POST</code> 方法且 <code>header[&#39;content-type&#39;]</code> 为 <code>application/json</code> 的数据，会进行 JSON 序列化。</li><li>对于 <code>POST</code> 方法且 <code>header[&#39;content-type&#39;]</code> 为 <code>application/x-www-form-urlencoded</code> 的数据，会将数据转换为 query string。</li></ul><p><strong>示例</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.example.com/request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//仅为示例，并非真实接口地址。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;uni.request&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    header: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;custom-header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//自定义请求头信息</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;token&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxxx&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;request success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>返回值</strong></p><p>如果希望返回一个 <code>requestTask</code> 对象，需要至少传入 success / fail / complete 参数中的一个。例如：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requestTask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://www.example.com/request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//仅为示例，并非真实接口地址。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">requestTask.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果没有传入 success / fail / complete 参数，则会返回封装后的 Promise 对象：<a href="https://uniapp.dcloud.net.cn/api/index.html#promise-%E5%B0%81%E8%A3%85" target="_blank" rel="noreferrer">Promise 封装</a></p><p>通过 <code>requestTask</code>，可中断请求任务。</p><h3 id="requesttask-abort" tabindex="-1">requestTask.abort() <a class="header-anchor" href="#requesttask-abort" aria-label="Permalink to &quot;requestTask.abort()&quot;">​</a></h3><p>如果没有传入 success / fail / complete 参数，则会返回封装后的 Promise 对象：<a href="https://uniapp.dcloud.net.cn/api/index.html#promise-%E5%B0%81%E8%A3%85" target="_blank" rel="noreferrer">Promise 封装</a></p><p>通过 <code>requestTask</code>，可中断请求任务。</p>`,38),n=[l];function p(h,d,r,k,g,E){return i(),s("div",null,n)}const c=t(e,[["render",p]]);export{o as __pageData,c as default};
