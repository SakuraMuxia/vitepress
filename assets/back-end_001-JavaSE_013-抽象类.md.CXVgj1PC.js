import{_ as a,c as e,o as s,a5 as n}from"./chunks/framework.ysm0ofoH.js";const b=JSON.parse('{"title":"抽象类","description":"","frontmatter":{},"headers":[],"relativePath":"back-end/001-JavaSE/013-抽象类.md","filePath":"back-end/001-JavaSE/013-抽象类.md"}'),t={name:"back-end/001-JavaSE/013-抽象类.md"},i=n(`<h1 id="抽象类" tabindex="-1">抽象类 <a class="header-anchor" href="#抽象类" aria-label="Permalink to &quot;抽象类&quot;">​</a></h1><p>似是而非，具备某种对象的特征但不具体。例如动物就是抽象类。</p><blockquote><p>使用抽象类的好处：</p><p>使用抽象类把一种事物进行抽象，在调用的时候就会灵活很多，你只需要把对应的参数传递进去即可。</p><p>同时扩展性也很好，新增的只需要继承父类的抽象类，然后在调用时，把新增的类new出一个实例，把这个实例传进去就可以。</p></blockquote><p>抽象类基本使用的示例：狗狗，动物，人类案例</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">你把狗狗当作动物来看：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">你把狗狗当作宠物来看：</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>抽象类实现多态的示例：门的案例</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>父类中的抽象方法就是对子类中的方法做了约束，也就是说子类中必须要有父类中定义的抽象方法。</p></blockquote>`,8),p=[i];function l(c,o,r,d,h,_){return s(),e("div",null,p)}const m=a(t,[["render",l]]);export{b as __pageData,m as default};
